generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  displayName   String
  email         String?        @unique
  password      String?
  avatarUrl     String?
  bio           String?
  account       Account[]
  posts         Post[]
  createdAt     DateTime       @default(now())
  followers     Follow[]       @relation("Followers")
  following     Follow[]       @relation("Following")
  updatedAt     DateTime       @updatedAt
  likes         Like[]
  bookmarks     Bookmark[]
  comments      Comment[]
receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String         @db.ObjectId
  attachments  Media[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  likes        Like[]
  bookmarks    Bookmark[]
  comments     Comment[]
  notifications Notification[]
}

model Follow {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  followerId String @db.ObjectId
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String @db.ObjectId
  followings  User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Media {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId    String?   @db.ObjectId
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Bookmark {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  recipientId String  @db.ObjectId
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String  @db.ObjectId
  issuer      User      @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String? @db.ObjectId
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt DateTime @default(now())

}


enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}