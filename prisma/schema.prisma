// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String    @unique
  displayName String
  email       String?   @unique
  password    String?
  avatarUrl   String?
  bio         String?
  account     Account[]
  posts       Post[]
  createdAt   DateTime  @default(now())
  followers   Follow[]  @relation("Followers")
  following   Follow[]  @relation("Following")
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  media     Media[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  followerId String @db.ObjectId
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String @db.ObjectId
  followings  User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Media {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  postId String? @db.ObjectId
  post   Post?   @relation(fields: [postId], references: [id]  , onDelete:  SetNull )
  type MediaType
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum MediaType {
  IMAGE
  VIDEO
}